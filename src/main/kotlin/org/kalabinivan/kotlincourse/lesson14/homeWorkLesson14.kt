package org.kalabinivan.kotlincourse.lesson14

fun main() {

//    Для решения каждой задачи постарайтесь использовать наиболее подходящий метод, не повторяясь с решением других задач.
//
//    Дан словарь с именем и временем выполнения каждого автоматизированного теста в секундах.
//    Определите среднее время выполнения теста.
    val autoTests = mapOf("Password" to 5.45, "Nickname" to 4.32, "E-mail" to 8.25)
    val averageAutoTest = autoTests.values.average()
    println(averageAutoTest)

//    Имеется словарь с метаданными автоматизированных тестов,
//    где ключи — это имена тестовых методов, а значения - строка с метаданными.
//    Выведите список всех тестовых методов.
    val testMethods = mapOf("Smoke" to "WTF", "Regress" to "OMG", "Integration" to "LOL")
    println(testMethods.keys)

//    В изменяемый словарь с данными о прохождении тестов добавьте новый тест и его результат.
    val projectTests = mutableMapOf("Registration form" to "Passed", "Exit Button" to "Passed")
    projectTests["Added Foto"] = "Failed"
    println(projectTests)

//    Посчитайте количество успешных тестов в словаре с результатами.
    println(projectTests.count { it.value == "Passed"})

//    Удалите из изменяемого словаря с баг-трекингом запись о баге, который был исправлен.
    val bugTracker = mutableMapOf("a1" to "in progress", "b4" to "ready to fix", "c5" to "Fixed" )

    bugTracker.remove("c5")
    println(bugTracker)

//    Для словаря с результатами тестирования веб-страниц (ключ — URL страницы, значение — статус ответа),
//    выведите сообщение о странице и статусе её проверки.
    val urlTests = mapOf("vk.com/music" to 404, "vk.com/videos" to 400, "vk.com/messages" to 505)
    println(urlTests.entries)

//    Найдите в словаре с названием и временем ответа сервисов только те,
//    время ответа которых превышает заданный порог.
    val serviceAnswers = mapOf("SkyNet" to 200, "SkyCraft" to 145, "FlyToTheSky" to 364,
        "SkyImTooHigh" to 55, "SkyAiAiAi" to 789)
    println(serviceAnswers.filter {it.value >= 200})

//    В словаре хранятся результаты тестирования API (ключ — endpoint, значение — статус ответа в строке).
//    Для указанного endpoint найдите статус ответа, если endpoint отсутствует,
//    предположите, что он не был протестирован.
    val testsAPI = mapOf("/api/users" to "200 OK",
    "/api/products" to "404 Not Found",
    "/api/orders" to "500 Internal Server Error",
    "/api/login" to "401 Unauthorized",
    "/api/register" to "201 Created")
    if (testsAPI.any{ it.key == "/api/orders"}) {
        println(testsAPI.getOrElse("/api/login") { "Не был протестирован" })
    }

//    Из словаря, содержащего конфигурации тестового окружения (ключ — название параметра конфигурации),
//    получите значение для "browserType". Ответ не может быть null.
    val configEnviroments = mapOf("browserType" to "Chrome",
        "OS" to "Windows",
        "Phone" to "Redmi 10S")
    println(configEnviroments.getValue("browserType"))

//    Создайте копию неизменяемого словаря с данными о версиях тестируемого ПО, чтобы добавить новую версию.
    val versionsData = mapOf("Ver 1.0" to 1.0,
        "Ver 1.1" to 1.1,
        "Ver 1.2" to 1.2 )
    val versionDataNew = versionsData.toMutableMap()
    println(versionsData)

//    Используя словарь с настройками тестирования для различных мобильных устройств (ключ — модель устройства),
//    получите настройки для конкретной модели или верните настройки по умолчанию.
    val phones = mapOf ("iphone" to 405,
        "samsung" to 206,
        "huawei" to 345)
    println(phones.getOrDefault("iphone", 100))

//    Проверьте, содержит ли словарь с ошибками тестирования (код и описание) определенный код ошибки.
    val errors = mapOf(404 to "Not Found",
        500 to "Internal Server Error",
        503 to "Service Unavailable")
    println(errors.containsKey(404))

//    Дан неизменяемый словарь, где ключи — это идентификаторы тестовых сценариев в формате "TestID_Version",
//    а значения — статусы выполнения этих тестов ("Passed", "Failed", "Skipped"). Отфильтруйте словарь,
//    оставив только те сценарии, идентификаторы которых соответствуют определённой версии тестов.
    val testCases = mapOf(
        "TestID_1" to "Passed",
        "TestID_2" to "Failed",
        "TestID_3" to "Passed",
        "TestID_4" to "Skipped",
        "TestID_5" to "Failed"
    )


//    У вас есть словарь, где ключи — это названия функциональных модулей приложения,
//    а значения — результаты их тестирования. Проверьте, есть ли модули с неудачным тестированием.

//    Добавьте в изменяемый словарь с настройками тестовой среды настройки из другого словаря.

//    Объедините два неизменяемых словаря с данными о багах.

//    Очистите изменяемый словарь с временными данными о последнем прогоне автоматизированных тестов.

//    Исключите из отчета по автоматизированному тестированию те случаи,
//    где тесты были пропущены (имеют статус “skipped”)

//    Удалите из словаря с конфигурациями тестирования набор устаревших конфигураций.

//    Создайте отчет о тестировании, преобразовав словарь с результатами тестирования
//    (ключ — идентификатор теста, значение — результат) в список строк формата "Test ID: результат".

//    Преобразуйте изменяемый словарь с результатами последнего тестирования в неизменяемый для архивации.

//    Преобразуйте словарь, содержащий ID теста и данные о времени выполнения тестов,
//    заменив идентификаторы тестов на их названия (название можно получить вызвав фейковый метод,
//    например getNameById(id: String))

//    Для словаря с оценками производительности различных версий приложения увеличьте каждую оценку на 10%,
//    чтобы учесть новые условия тестирования.

//    Проверьте, пуст ли словарь с ошибками компиляции тестов.

//    Убедитесь, что словарь с результатами нагрузочного тестирования не пуст.

//    Проверьте, прошли ли успешно все автоматизированные тесты в словаре с результатами.

//    Определите, содержит ли словарь с результатами тестирования хотя бы один тест с ошибкой.

//    Отфильтруйте словарь с результатами тестирования сервисов, оставив только те тесты,
//    которые не прошли успешно и содержат в названии “optional”.

}

