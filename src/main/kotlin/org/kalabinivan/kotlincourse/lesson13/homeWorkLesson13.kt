package org.kalabinivan.kotlincourse.lesson13

fun main() {


//1. Предварительные задачи на использование методов.
//Подбери подходящий для задачи метод
    println("Задачи на приведение коллекций к значению")

    val numbersList = listOf(1, 2, 3, 4, 5, 6, -3, -30, -23, 23, 34)
    var stringsList = listOf(
        "Балин",
        null,
        "Двалин",
        "Двалин",
        "Фили",
        "Кили",
        "Кили",
        "Дори",
        null,
        "Нори",
        "Ори",
        "Оин",
        "Глоин",
        "Бифур",
        "Бофур",
        "Бомбур"
    )
// 1. Проверить, что размер коллекции больше 5 элементов. - size
    if (numbersList.size > 5) {
        println(" 1 - ${numbersList.size}")
    } else println("В коллекция меньше 5 элементов")

// 2. Проверить, что коллекция пустая - isEmpty
    println(" 2 - ${numbersList.isEmpty()}")

// 3. Проверить, что коллекция не пустая - isNotEmpty
    println(" 3 - ${numbersList.isNotEmpty()}")

// 4. Взять элемент по индексу или создать значение если индекса не существует - getOrElse
    println(" 4 - ${numbersList.getOrElse(12) { "Индекс выходит за рамки списка" }}")

// 5. Собрать коллекцию в строку - joinToString
    println(" 5 - ${numbersList.joinToString(separator = " ") { "$it" }}")

// 6. Посчитать сумму всех значений - sum
    println(" 6 - ${numbersList.sum()}")

// 7. Посчитать среднее - average
    println(" 7 - ${numbersList.average()}")

// 8. Взять максимальное число - maxOrNull
    println(" 8 - ${numbersList.maxOrNull()}")

// 9. Взять минимальное число - minOrNull
    println(" 9 - ${numbersList.minOrNull()}")

// 10. Взять первое число или null - firstOrNull
    println(" 10 - ${numbersList.firstOrNull()}")

// 11. Проверить что коллекция содержит элемент - contains
    println(" 11 - ${numbersList.contains(-30)}")

    println("Задачи на обработку коллекций")

// 1. Отфильтровать коллекцию по диапазону 18-30 - filter
    println(" 1 - ${numbersList.filter { it in 18..30 }}")

// 2. Выбрать числа, которые не делятся на 2 и 3 одновременно - filterNot
    println(" 2 - ${numbersList.filterNot { it % 2 == 0 && it % 3 == 0 }} ")

// 3. Очистить текстовую коллекцию от null элементов - filterNotNull
    println(" 3 - $stringsList \n${stringsList.filterNotNull()}")
    stringsList = stringsList.filterNotNull()

// 4. Преобразовать текстовую коллекцию в коллекцию длин слов - forEach
    print(" 4 - ")
    println("${stringsList.forEach { print("${it.length} ") }}")

// 5. Преобразовать текстовую коллекцию в мапу, где ключи - слова, а значения - перевёрнутые слова - associate
    println(" 5 - ${stringsList.associateWith { it to it.reversed() }}")

// 6. Отсортировать список в алфавитном порядке - sorted
    println(" 6 - ${stringsList.sorted()}")

// 7. Отсортировать список по убыванию - sortedDescending
    println(" 7 - ${stringsList.sortedDescending()}")

// 8. Распечатать квадраты элементов списка - map
    println(" 8 - ${numbersList.forEach { println(it * it) }} ")

// 9. Группировать список по первой букве слов - groupBy
    println(" 9 - ${stringsList.groupBy { it[0] }} ")

// 10. Очистить список от дублей - distinct
    println(" 10 - ${stringsList.distinct()}")

// 11. Взять первые 3 элемента списка - take
    println(" 11 - ${stringsList.take(3)}")

// 12. Взять последние 3 элемента списка - takeLast
    println(" 12 - ${stringsList.takeLast(3)}")

//    === ЗАДАНИЕ 2 ===
    val myCollection: List<Int> =  listOf(3, 10, 14, 1598, 2456)
    println("Задание 2 ${collectionAnalyze(myCollection)}")

//    === ЗАДАНИЕ 3 ===

    val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
    println(worstStudents(grades))

//    === ЗАДАНИЕ 4 ===

    val list = listOf("Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка")
    println(catalog(list))

//    === ЗАДАНИЕ 5 ===
    println(averageSymbolsList(list))

//    === ЗАДАНИЕ 6 ===
    val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
    println(unicNumbers(numbers))

//    === ЗАДАНИЕ 7 ===
    val ages = listOf(22, 18, 30, 45, 17, null, 60)
    println(firstAdult(ages))


}
//Задание 2: Характеристика числовой коллекции
//Написать метод, который принимает коллекцию чисел и возвращает строку с текущим состоянием коллекции
// используя конструкцию when

//Если коллекция пустая - “Пусто”
//Если количество элементов меньше пяти - “Короткая”
//Если коллекция начинается с 0 - “Стартовая”
//Если сумма всех чисел больше 10000 - “Массивная”
//Если среднее значение равно 10 - “Сбалансированная”
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//Если максимальное число меньше -10 - “Отрицательная”
//Если минимальное число больше 1000 - “Положительная”
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
//Иначе - “Уникальная”

//Вызвать метод с данными, подходящими под каждую из веток

fun collectionAnalyze(myCollection: List<Int>): String{
    return when{
        myCollection.isEmpty() -> "Пусто"
        myCollection.size < 5 -> "Короткая"
        myCollection.getOrNull(0) == 0 -> "Стартовая"
        myCollection.sum() >= 10000 -> "Массивная"
        myCollection.average().toInt() == 10 -> "Сбалансированная"
        myCollection.joinToString("").length ==  20 -> "Клейкая"
        myCollection.max() < - 10 -> "Отрицательная"
        myCollection.min() > 1000 -> "Положительная"
        myCollection.contains(3) && myCollection.contains(14) -> "Пи***датая"
        else -> "Уникальная"
    }
}

//Задание 3: Анализ Учебных Оценок
//Начальные значения: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.

fun worstStudents(grades: List<Int>) {
    println({grades.filter {it >= 60}
        .sorted()
        .take(3)})
}

//Задание 4: Создание каталога по первой букве.
//Начальные значения: val list = listOf(
//    "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка",
//    "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик",
//    "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска",
//    "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка",
//    "Настенные часы", "подсвечник", "Журнальный столик", "сувенир",
//    "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка")
//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве.
fun catalog(list: List<String>) {
    println( list.map { it.lowercase() }
        .groupBy { it[0] })
}

//Задание 5: Подсчёт средней длины слов в списке.
//Начальные значения из задачи 4.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение.
// Вывести форматированный текст с двумя знаками после запятой.
fun averageSymbolsList(list: List<String>) {
    println("средняя длина %.2f".format(list.map { it.length }.average()))
}

//Задание 6: Категоризация чисел.
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).

fun unicNumbers(numbers: List<Int>) {
    println(numbers.distinct().sortedDescending().groupBy { if(it % 2 == 0) "чётные" else "нечётные" })
}

//Задание 7: Поиск первого подходящего элемента
//Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60)
//Цель: Найти первый возраст в списке, который соответствует условию (больше 18), преобразовать его к строке,
// или вернуть сообщение "Подходящий возраст не найден".
fun firstAdult(ages: List<Int?>) {
    println(ages.filterNotNull().firstOrNull {it>= 18}?.toString() ?: "Подходящий возраст не найден")
}
