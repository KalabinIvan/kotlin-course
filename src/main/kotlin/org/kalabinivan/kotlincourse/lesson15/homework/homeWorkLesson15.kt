package org.kalabinivan.kotlincourse.lesson15.homework

fun main () {

//    Событие: Вечеринка Создайте класс Party, который описывает вечеринку.
//    У него должны быть свойства location (String) и attendees (Int).
//    Добавьте метод details(), который выводит информацию о месте проведения и количестве гостей.
    println("Задание 1\n")

    val party = Party(
        "Blue Lagoon",
        50
    )
    party.details()

//    Аспект реальности: Эмоция Создайте класс Emotion, который представляет эмоцию.
//    У него должно быть свойство type (String) и intensity (Int).
//    Добавьте метод express(), который выводит описание эмоции в зависимости от её типа и интенсивности.
    println("\nЗадание 2\n")

    val emotions = Emotions(
        "Злость",
        26
    )
    emotions.express()

//    Природное явление: Луна Создайте объект Moon, который будет представлять Луну.
//    Добавьте свойства isVisible (Boolean), чтобы отображать, видна ли Луна в данный момент,
//    и phase (String), чтобы отображать текущую фазу Луны (например, "Full Moon", "New Moon").
//    Добавьте метод showPhase(), который выводит текущую фазу Луны.
    println("\nЗадание 3\n")

    val moon = Moon

    moon.setVisible(true)

    moon.showPhase("New Moon")

//    Покупка: Продукт Создайте дата класс для продукта, который будет представлять продукт в магазине.
//    У него должны быть свойства “название”, “цена”, “количество”.
    println("\nЗадание 4\n")

    val product = Product("Ham", 127.3, 35)

    println(product)

//    Мероприятие: Концерт Создайте класс, который будет представлять концерт.
//    У него должны быть свойства “группа”, “место проведения”, “стоимость”, “вместимость зала”.
//    Также приватное поле “проданные билеты”. Добавьте метод,
//    который выводит информацию о концерте и метод “купить билет”,
//    который увеличивает количество проданных билетов на один.
    println("\nЗадание 5\n")

    val event = Event(
        "Radiohead",
        "Ionoteka",
        1000.00,
        300,
        0
    )

    event.eventInfo()
    event.buyTicket(true)


//    Дополнительное задание: Работа со Стеллажами и Полками
//            Цель Задания
//            Создать систему управления складским пространством с использованием классов "Стеллаж"
//            и "Полка стеллажа".
//    Класс Shelf (Полка Стеллажа)
//    Характеристики:
//    Вместимость полки (capacity): максимальная сумма букв всех названий предметов,
//    которые могут быть размещены на полке.
//
//    Список предметов (items): хранит названия предметов на полке.
//    Методы:
//    Добавление Предмета (addItem):
//    Принимает название предмета.
//    Проверяет, поместится ли предмет на полку, учитывая длину его названия и текущее заполнение полки.
//    Возвращает true и добавляет предмет, если есть место. В противном случае возвращает false.
//    Удаление Предмета (removeItem):
//    Принимает название предмета.
//    Удаляет предмет, если он найден на полке.
//    Возвращает true, если предмет был удален, и false, если такой предмет не найден.
//    Проверка Вместимости (canAccommodate):
//    Принимает название предмета.
//    Определяет, вместится ли предмет на полку.
//    Возвращает true, если предмет вместится, и false, если места недостаточно.
//    Проверка наличия предмета:
//    Принимает название предмета,
//    возвращает true если такой предмет есть
//    Получение списка предметов:
//    Возвращает неизменяемый список предметов
//            Класс Rack (Стеллаж)
//    Характеристики:
//    Список полок (shelves): хранит полки стеллажа.
//    Максимальное количество полок.
//    Методы:
//    Добавление Полки (addShelf):
//    Добавляет новую полку в стеллаж.
//    Возвращает true, если полка была успешно добавлена или
//    false если стеллаж уже заполнен или была попытка добавить полку которая уже установлена.

//    Удаление Полки (removeShelf):
//    Принимает индекс полки для удаления.
//    Удаляет полку по указанному индексу.
//    Возвращает true, если полка была успешно удалена или false если она не существует.
//    Добавление Предмета (addItem):
//    Добавляет предмет на самую свободную полку.
//    Возвращает true, если предмет успешно добавлен, и false, если на всех полках недостаточно места.
//    Удаление Предмета (removeItem):
//    Находит и удаляет предмет с любой полки.

}